/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ProfileLazyImport = createFileRoute('/profile')()
const IndexLazyImport = createFileRoute('/')()
const UsersIndexLazyImport = createFileRoute('/users/')()
const EquipmentsIndexLazyImport = createFileRoute('/equipments/')()
const UsersCreateLazyImport = createFileRoute('/users/create')()
const UsersIdLazyImport = createFileRoute('/users/$id')()
const ServiceCreateLazyImport = createFileRoute('/service/create')()
const ServiceIdLazyImport = createFileRoute('/service/$id')()
const EquipmentsCreaetLazyImport = createFileRoute('/equipments/creaet')()
const EquipmentsPostIdLazyImport = createFileRoute('/equipments/$postId')()

// Create/Update Routes

const ProfileLazyRoute = ProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const EquipmentsIndexLazyRoute = EquipmentsIndexLazyImport.update({
  path: '/equipments/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/equipments/index.lazy').then((d) => d.Route),
)

const UsersCreateLazyRoute = UsersCreateLazyImport.update({
  path: '/users/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/create.lazy').then((d) => d.Route))

const UsersIdLazyRoute = UsersIdLazyImport.update({
  path: '/users/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/$id.lazy').then((d) => d.Route))

const ServiceCreateLazyRoute = ServiceCreateLazyImport.update({
  path: '/service/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/service/create.lazy').then((d) => d.Route),
)

const ServiceIdLazyRoute = ServiceIdLazyImport.update({
  path: '/service/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/service/$id.lazy').then((d) => d.Route))

const EquipmentsCreaetLazyRoute = EquipmentsCreaetLazyImport.update({
  path: '/equipments/creaet',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/equipments/creaet.lazy').then((d) => d.Route),
)

const EquipmentsPostIdLazyRoute = EquipmentsPostIdLazyImport.update({
  path: '/equipments/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/equipments/$postId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/equipments/$postId': {
      id: '/equipments/$postId'
      path: '/equipments/$postId'
      fullPath: '/equipments/$postId'
      preLoaderRoute: typeof EquipmentsPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/equipments/creaet': {
      id: '/equipments/creaet'
      path: '/equipments/creaet'
      fullPath: '/equipments/creaet'
      preLoaderRoute: typeof EquipmentsCreaetLazyImport
      parentRoute: typeof rootRoute
    }
    '/service/$id': {
      id: '/service/$id'
      path: '/service/$id'
      fullPath: '/service/$id'
      preLoaderRoute: typeof ServiceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/service/create': {
      id: '/service/create'
      path: '/service/create'
      fullPath: '/service/create'
      preLoaderRoute: typeof ServiceCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/$id': {
      id: '/users/$id'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/create': {
      id: '/users/create'
      path: '/users/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof UsersCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/equipments/': {
      id: '/equipments/'
      path: '/equipments'
      fullPath: '/equipments'
      preLoaderRoute: typeof EquipmentsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ProfileLazyRoute,
  EquipmentsPostIdLazyRoute,
  EquipmentsCreaetLazyRoute,
  ServiceIdLazyRoute,
  ServiceCreateLazyRoute,
  UsersIdLazyRoute,
  UsersCreateLazyRoute,
  EquipmentsIndexLazyRoute,
  UsersIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/equipments/$postId",
        "/equipments/creaet",
        "/service/$id",
        "/service/create",
        "/users/$id",
        "/users/create",
        "/equipments/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/equipments/$postId": {
      "filePath": "equipments/$postId.lazy.tsx"
    },
    "/equipments/creaet": {
      "filePath": "equipments/creaet.lazy.tsx"
    },
    "/service/$id": {
      "filePath": "service/$id.lazy.tsx"
    },
    "/service/create": {
      "filePath": "service/create.lazy.tsx"
    },
    "/users/$id": {
      "filePath": "users/$id.lazy.tsx"
    },
    "/users/create": {
      "filePath": "users/create.lazy.tsx"
    },
    "/equipments/": {
      "filePath": "equipments/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
